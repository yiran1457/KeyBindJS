plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    // This should be below the net.minecraftforge.gradle plugin
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {

    //accessWidener = file('src/main/resources/keybindjs.accesswidener')
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    // mappings channel: mapping_channel, version: mapping_version
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

// 此属性用于在开发中启用访问转换器（Access Transformers）
// 它们将被应用于Minecraft工件（artifact）
// 访问转换器文件可放置在项目中的任意位置
// 但最终mod的jar包中必须将其置于"META-INF/accesstransformer.cfg"路径下，才能被Forge加载
// 这个默认位置是最佳实践，可确保文件在最终jar中自动放置到正确位置
// 更多信息请参阅：https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/
accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    flatDir {
    dir 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use.
    // Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
    // The "userdev" classifier will be requested and setup by ForgeGradle.
    // If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
    // then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    //JEI 的 mod 依赖项示例 - 使用 fg.deobf（） 确保依赖项重新映射到您的开发映射
    //JEI API 声明供编译时使用，而完整的 JEI 工件在运行时使用
    //compileOnly fg.deobf（“mezz.jei：jei-${mc_version}-common-api：${jei_version}”）
    //compileOnly fg.deobf（“mezz.jei：jei-${mc_version}-forge-api：${jei_version}”）
    //runtimeOnly fg.deobf（“mezz.jei：jei-${mc_version}-forge：${jei_version}”）


//    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation fg.deobf("blank:rhino-forge:2001")
    implementation fg.deobf("blank:architectury-9.2.14:forge")
    implementation fg.deobf("blank:geckolib-forge:1.20.1")
    implementation fg.deobf("blank:Kiwi-1.20.1:Forge-11.8.30")
    implementation fg.deobf("blank:mutil-1.20.1:6.1.1")

    implementation fg.deobf("blank:Lychee-1.20.1:Forge-5.1.17-all")
    implementation fg.deobf("blank:integrated_api-1.5.1+1.20.1:forge")
    implementation fg.deobf("blank:Loquat-1.20.1:forge-2.1.2")
    implementation fg.deobf("blank:ModernUI-1.20.1:1")
    implementation fg.deobf("blank:kubejs-forge:2001")
    implementation fg.deobf("blank:curios-forge:5.11.1+1.20.1")
    implementation fg.deobf("blank:jei-1.20.1:forge-15.20.0.106")
    implementation fg.deobf("blank:Jade-1.20.1:Forge-11.12.3")
    implementation fg.deobf("blank:IBEEditor-1.20:2.2.8-forge")
    implementation fg.deobf("blank:tetra-1.20.1:6.8.0")

    implementation fg.deobf("blank:RingsOfAscension-1.20.1:2.0.2")
    implementation fg.deobf("blank:powerfuljs-1.20.1:1.6.1")
    implementation fg.deobf("blank:probejs-7.0.0:forge")
    implementation fg.deobf("blank:kubejsadditions-forge:4.3.3")
    implementation fg.deobf("blank:entityjs-0.4.2:1.20.1")
    implementation fg.deobf("blank:renderjs-forge:2001.2.1")
    implementation fg.deobf("blank:morejs-1.20.1:0.10.0")
    implementation fg.deobf("blank:EventJS-1.20.1:1.3.0")

    //使用 ./libs 中的 mod jar 和平面 dir 存储库的 mod 依赖项示例
    //这会映射到 ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    //搜索时忽略组 ID - 在本例中，它是 “空白”
    //implementation fg.deobf（“blank：coolmod-${mc_version}：${coolmod_version}”）
    //有关更多信息：
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}



// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// tasks.named('publish').configure {
//     dependsOn 'reobfJar'
// }

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'